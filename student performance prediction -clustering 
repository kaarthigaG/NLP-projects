{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1QPon8hTEDBpQhpfux9Ar-xzijbZr4thK",
      "authorship_tag": "ABX9TyPiQ76WJEYjC64zwo2FdkEY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kaarthigaG/NLP-projects/blob/main/student%20performance%20prediction%20-clustering%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 518
        },
        "id": "o93YH_oTu-P4",
        "outputId": "899eb0bb-a86a-4f8e-bf52-158b86662e59"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['StudentID', 'Name', 'Gender', 'AttendanceRate', 'StudyHoursPerWeek',\n",
            "       'PreviousGrade', 'ExtracurricularActivities', 'ParentalSupport',\n",
            "       'FinalGrade'],\n",
            "      dtype='object')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load data\n",
        "df = pd.read_csv('/content/student_performance.csv')\n",
        "print(df.columns)\n",
        "\n",
        "\n",
        "# Select numerical features for scaling\n",
        "numerical_features = ['StudentID' , 'AttendanceRate', 'StudyHoursPerWeek', 'FinalGrade']\n",
        "\n",
        "# Data Preprocessing (Scaling)\n",
        "scaler = StandardScaler()\n",
        "data_scaled = scaler.fit_transform(df[numerical_features])\n",
        "\n",
        "# K-means clustering\n",
        "kmeans = KMeans(n_clusters=3)\n",
        "kmeans.fit(data_scaled)\n",
        "\n",
        "# Assign clusters to the data\n",
        "df['Cluster'] = kmeans.labels_\n",
        "\n",
        "# Visualize clusters\n",
        "# Replace 'AttendanceRate' and 'StudyHoursPerWeek' with the actual features you want to plot\n",
        "plt.scatter(df['AttendanceRate'], df['StudyHoursPerWeek'], c=df['Cluster'], cmap='viridis')\n",
        "plt.xlabel('AttendanceRate') # Set the x-axis label\n",
        "plt.ylabel('StudyHoursPerWeek') # Set the y-axis label\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load CSV file\n",
        "df = pd.read_csv('student_performance.csv')\n",
        "\n",
        "# Convert to Excel file\n",
        "df.to_excel('output.xlsx', index=False)\n"
      ],
      "metadata": {
        "id": "JyWNfTheyEM6"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load Excel file\n",
        "df = pd.read_excel('/content/output.xlsx')\n",
        "\n",
        "# Convert to CSV file\n",
        "df.to_csv('output.csv', index=False)"
      ],
      "metadata": {
        "id": "2kgr3VV-yVxZ"
      },
      "execution_count": 15,
      "outputs": []
    }
  ]
}